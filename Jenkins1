pipeline {
    agent {
        label 'Ansible'
    }

    // triggers {
    //        cron('0 0 1 * *')  // Schedule to run every month
    //  }
    

    environment {
        REMOTE_PATH = '/home/ec2-user'
        ANSIBLE_SERVER = '67.202.35.1'
        SSH_CREDENTIALS = 'ansible-master-cred'
        BRANCH_NAME = 'main'
        JFROG_CRED = 'jfrog'
        PROJECT_URL = 'https://github.com/adoukpo/Ansible-Jenkins-project.git'
        ANSIBLE_INVENTORY_PATH = 'inventory.yml'
        ANSIBLE_PLAYBOOK_PATH = 'play3.yml'
        ANSIBLE_PLAYBOOK_PATH = 'qa-server.yml'
        ZIP_FILENAME = 'play3.yml.zip'
        ZIP_FILENAME = 'qa-server.yml.zip'
        ARTIFACTORY_URL = 'http://54.197.123.86:8081/artifactory'
        ARTIFACTTARGETPATH = 'play3.yml${BUILD_ID}.zip'
        ARTIFACTTARGETPATH = 'qa-server.yml${BUILD_ID}.zip'
        REPO = 'geoapp'
        ARTIFACTPATH = '${ZIP_FILENAME}'
        ARTIFACTORY_USER = 'admin'
        ARTIFACTORY_PASSWORD = 'password'
        //  // Assuming SSH credentials for each server
        // SSH_SERVER_1 = credentials('ssh-server-1') // Server 1 SSH credentials ID
        // SSH_SERVER_2 = credentials('ssh-server-2') // Server 2 SSH credentials ID
    }

    stages {
        stage('Git Checkout') {
            steps {
                git branch: "${BRANCH_NAME}", url: "${PROJECT_URL}"
            }
        }

        stage('Testing playbook syntax') {
            steps {
                script {
                    sh "ansible-playbook -i ${ANSIBLE_INVENTORY_PATH} ${ANSIBLE_PLAYBOOK_PATH} --syntax-check"
                }
            }
        }

        stage('Run Playbook') {
            steps {
                script {
                    sh "ansible-playbook -i ${ANSIBLE_INVENTORY_PATH} ${ANSIBLE_PLAYBOOK_PATH}"
                }
            }
        }

        stage('Package Artifact into ZIP') {
            steps {
                sh "zip -r ${ZIP_FILENAME} *"
            }
        }

        stage('Upload ZIP to JFrog') {
            steps {
                withCredentials([usernamePassword(credentialsId: "${JFROG_CRED}", 
                    usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_PASSWORD')]) {
                    script {
                        sh """
                            curl -u ${ARTIFACTORY_USER}:${ARTIFACTORY_PASSWORD} \
                                 -T ${ARTIFACTPATH} \
                                 ${ARTIFACTORY_URL}/${REPO}/${ARTIFACTTARGETPATH}
                        """
                    }
                }
            }
        }

        stage('Deploy to Ansible Server') {
            steps {
                sshagent(credentials: [SSH_CREDENTIALS]) {
                    script {
                        sh "ssh -o StrictHostKeyChecking=no ec2-user@${ANSIBLE_SERVER} 'echo Connected'"

                        // Copy the ZIP file to the remote server
                        sh "scp -o StrictHostKeyChecking=no ${ZIP_FILENAME} ec2-user@${ANSIBLE_SERVER}:${REMOTE_PATH}/${ZIP_FILENAME}"
                    }
                }
            }
        }
        // stage('Update Servers') {
        //     steps {
        //         // Update Server 1
        //         sshagent (credentials: ['ssh-server-1']) {
        //             sh 'ssh -o StrictHostKeyChecking=no user@server1 "sudo yum update -y || sudo apt update -y"'
        //         }
        //         // Update Server 2
        //         sshagent (credentials: ['ssh-server-2']) {
        //             sh 'ssh -o StrictHostKeyChecking=no user@server2 "sudo yum update -y || sudo apt update -y"'
        //         }
        //         // Repeat for other servers as needed
        //     }
        // }
    // post {
    //     success {
    //         echo 'Update completed on all servers.'
    //     }
    //     failure {
    //         echo 'Update failed on one or more servers.'
    //     }
    // }
    }
}
